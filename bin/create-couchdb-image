#!/bin/sh

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Create a CouchDB AMI.
# Based upon the Apache Hadoop AMI scripts
# Inspired by Jonathan Siegel's EC2 script (http://blogsiegel.blogspot.com/2006/08/sandboxing-amazon-ec2.html)

# Import variables
bin=`dirname "$0"`
bin=`cd "$bin"; pwd`
. "$bin"/couchdb-ec2-env.sh

AMI_IMAGE=`ec2-describe-images -a | grep $S3_BUCKET | grep $COUCHDB_VERSION | grep $ARCH | grep available | awk '{print $2}'`

[ ! -z $AMI_IMAGE ] && echo "AMI already registered, use: ec2-deregister $AMI_IMAGE" && exit -1

echo "will bundle to: $S3_BUCKET/couchdb-$COUCHDB_VERSION-$ARCH.manifest.xml"

echo "Starting an AMI with ID $BASE_AMI_IMAGE."
OUTPUT=`ec2-run-instances $BASE_AMI_IMAGE -k $EC2_KEY_NAME -t $INSTANCE_TYPE`
BOOTING_INSTANCE=`echo $OUTPUT | awk '{print $6}'`

echo "Instance is $BOOTING_INSTANCE."

echo "Polling server status (ec2-describe-instances $BOOTING_INSTANCE)"
while true; do
  printf "."
  HOSTNAME=`ec2-describe-instances $BOOTING_INSTANCE | grep running | awk '{print $4}'`
  if [ ! -z $HOSTNAME ]; then
    break;
  fi
  sleep 1
done

# todo check to see if port 22 is open on the security group
# ec2-authorize -p 22 default

echo "The server is available at $HOSTNAME. Will attempt to ssh in until it's fully booted."
while true; do
  REPLY=`ssh $SSH_OPTS "$USER@$HOSTNAME" 'echo "hello"'`
  if [ ! -z $REPLY ]; then
   break;
  fi
  sleep 5
done

TMP_ENV_FILE="$bin"/remote/tmp/ec2-env-tmp.sh
echo "Creating temporary enviroment script in $TMP_ENV_FILE"
mkdir -p "$bin"/remote/tmp
echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" > "$TMP_ENV_FILE"
echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> "$TMP_ENV_FILE"
echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> "$TMP_ENV_FILE"
echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> "$TMP_ENV_FILE"
echo "COUCHDB_VERSION=$COUCHDB_VERSION" >> "$TMP_ENV_FILE"
echo "ARCH=$ARCH" >> "$TMP_ENV_FILE"
echo "USER=$USER" >> "$TMP_ENV_FILE"
echo "S3_BUCKET=$S3_BUCKET" >> "$TMP_ENV_FILE"
echo "BUNDLE=$BUNDLE" >> "$TMP_ENV_FILE"

echo "Copying scripts."

# make it so $user can do copies
ssh $SSH_OPTS "$USER@$HOSTNAME" "sudo mkdir -p /mnt/makeami/ && sudo chown -R $USER /mnt/makeami/"

# Copy setup scripts
scp $SSH_OPTS "$TMP_ENV_FILE" "$USER@$HOSTNAME:/mnt/makeami"
scp $SSH_OPTS "$bin"/remote/cleanup-keys "$USER@$HOSTNAME:/mnt/makeami"
scp $SSH_OPTS "$bin"/remote/create-couchdb-image-remote "$USER@$HOSTNAME:/mnt/makeami"
scp $SSH_OPTS "$bin"/remote/couchdb-init "$USER@$HOSTNAME:/mnt/makeami"
scp $SSH_OPTS "$bin"/remote/couchdb_vhost.conf "$USER@$HOSTNAME:/mnt/makeami"
scp $SSH_OPTS "$bin"/remote/couchdb-config.ini "$USER@$HOSTNAME:/mnt/makeami"
scp $SSH_OPTS "$bin"/remote/motd "$USER@$HOSTNAME:/mnt/makeami"

# Copy private key and certificate (for bundling image)
scp $SSH_OPTS $EC2_KEYDIR/pk*.pem "$USER@$HOSTNAME:/mnt/makeami"
scp $SSH_OPTS $EC2_KEYDIR/cert*.pem "$USER@$HOSTNAME:/mnt/makeami"

echo "Deleting env script from local machine."
rm "$TMP_ENV_FILE"

# Connect to it, run the script
ssh $SSH_OPTS "$USER@$HOSTNAME" 'sudo /mnt/makeami/create-couchdb-image-remote'

# Register image
echo "registering ami"
ec2-register $S3_BUCKET/couchdb-$COUCHDB_VERSION-$ARCH.manifest.xml
echo "registered: $S3_BUCKET/couchdb-$COUCHDB_VERSION-$ARCH.manifest.xml"

echo "Terminating instance"
ec2-terminate-instances $BOOTING_INSTANCE
